<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog | AdriÃ¡n Sager La Ganga</title>
    <link>https://sager611.github.io/post/</link>
      <atom:link href="https://sager611.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Blog</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Tue, 23 May 2023 15:02:50 +0200</lastBuildDate>
    <image>
      <url>https://sager611.github.io/media/icon_hu4c33f529594115c732c21d26133ca9c2_321136_512x512_fill_lanczos_center_3.png</url>
      <title>Blog</title>
      <link>https://sager611.github.io/post/</link>
    </image>
    
    <item>
      <title>Memory efficient numpy.random.choice()</title>
      <link>https://sager611.github.io/post/memory-efficient-choice-function/</link>
      <pubDate>Tue, 23 May 2023 15:02:50 +0200</pubDate>
      <guid>https://sager611.github.io/post/memory-efficient-choice-function/</guid>
      <description>&lt;!--CSS--&gt;
&lt;style&gt;
.algo-container {
  margin: auto;
  margin-top: 2em;
  margin-bottom: 2em;
  width: 90%;
}
.algo-hr-top { height:3px;  }
.algo-hr-mid { height:1px; }
.algo-hr-bottom { height:3px;  }

.lemma {
  margin: auto;
  margin-top: 2em;
  margin-bottom: 2em;
  width: 90%;
  overflow-x:auto;
}
.lemma-qed { margin-left:95%; }
&lt;/style&gt;
&lt;p&gt;NumPy&amp;rsquo;s &lt;a href=&#34;https://numpy.org/doc/1.24/reference/random/generated/numpy.random.choice.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;numpy.random.choice()&lt;/code&gt;&lt;/a&gt; method samples items at random from an array.&lt;/p&gt;
&lt;p&gt;Unfortunately, sampling &lt;em&gt;without&lt;/em&gt; replacement an &lt;code&gt;int&lt;/code&gt; from $0$ to $N-1$ requires $O(N)$ memory. Thus, the following code will result in an OOM error (if not completely crash your machine):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;np&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1_000_000_000_000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is because &lt;code&gt;numpy.random.choice()&lt;/code&gt; creates (at least up to NumPy version 1.24) an array of size $N$ (in our example, ~3&#39;725 GB !), as it can be seen in the &lt;a href=&#34;https://github.com/numpy/numpy/blob/1e8b589033e1ce2add835840ccdc259e5e1fa4d0/numpy/random/mtrand.pyx#L841&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source code&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;# pop_size == a when `a` is an `int`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;permutation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pop_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ndim&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;permutation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;isinstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;integer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# this creates an array of size `x`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shuffle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, intuitively we shouldn&amp;rsquo;t need to create an array of size $N$ if we are sampling a small amount of items $k$, right?&lt;/p&gt;
&lt;p&gt;We could simply keep sampling &lt;em&gt;with&lt;/em&gt; replacement (which doesn&amp;rsquo;t require $O(N)$ memory) until we have an array of $k$ different items.&lt;/p&gt;
&lt;p&gt;This very basic and straightforward algorithm would be defined as follows:&lt;/p&gt;
&lt;div class=&#34;algo-container&#34;&gt;
&lt;hr class=&#34;algo-hr-top&#34;&gt;
&lt;b&gt;Algorithm 1&lt;/b&gt; An algorithm to draw without replacement. $k&gt;0$ items are taken without replacement from a universe of size $N$. $set(X)$ removes the duplicates in $X$ and $choice(N, k)$ samples $k$ items with replacement with a space complexity of $O(k \log{N})$:
&lt;hr class=&#34;algo-hr-mid&#34;&gt;
&lt;b&gt;Require: &lt;/b&gt; $N \geq (2 + \sqrt{2}) \cdot k$
&lt;p&gt;1: â $X \leftarrow choice(N,k)$ &lt;br/&gt;
2: â $X \leftarrow set(X)$ &lt;br/&gt;
3: â &lt;b&gt;while &lt;/b&gt;$\vert X\vert \neq k$&lt;b&gt; do&lt;/b&gt; &lt;br/&gt;
4: â â $s \leftarrow choice(N, 1)$ &lt;br/&gt;
5: â â &lt;b&gt;if &lt;/b&gt;$s \notin X$&lt;b&gt; then&lt;/b&gt; &lt;br/&gt;
6: â â â $X \leftarrow X \cup \left\{ s \right\}$ &lt;br/&gt;
7: â â &lt;b&gt;end if&lt;/b&gt; &lt;br/&gt;
8: â &lt;b&gt;end while&lt;/b&gt; &lt;br/&gt;&lt;/p&gt;
&lt;hr class=&#34;algo-hr-bottom&#34;&gt;
&lt;/div&gt;
&lt;p&gt;Which in code looks like,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Sample `k` elements from 0 to `N-1` with or without replacement.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;N&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.414213562373095&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But why require that $N \geq (2 + \sqrt{2})\cdot k$? We will figure it out by proving a couple of theorems:&lt;/p&gt;
&lt;div class=&#34;lemma&#34;&gt;
  &lt;b&gt;Theorem 1&lt;/b&gt;&amp;ensp; Algorithm 1 &lt;i&gt;has a space complexity of $O(k \log{N})$&lt;/i&gt;.
  &lt;br/&gt;
  &lt;br/&gt;
  &lt;i&gt;Proof.&lt;/i&gt; All $X$, $choice(N, k)$ and $set(X)$ occupy $O(k \log{N})$ space, since $\vert X\vert$ is at most $k$ and our largest number, $N$, requires $O(\log{N})$ bits to be stored.
  &lt;div class=&#34;lemma-qed&#34;&gt;$\square$&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This one was very simple. But, how about time complexity?&lt;/p&gt;
&lt;div class=&#34;lemma&#34;&gt;
  &lt;b&gt;Theorem 2&lt;/b&gt;&amp;ensp; Algorithm 1 &lt;i&gt;has an expected time complexity of $O(k)$, i.e., it has a time complexity of $\Theta(k)$&lt;/i&gt;.
  &lt;br/&gt;
  &lt;br/&gt;
  &lt;i&gt;Proof.&lt;/i&gt; In order to advance in the while loop, we need to add new elements to $X$. Thus:
  $$
  \begin{align}
  P\left[\text{sampling unique item after }i+1\text{ draws}\right] &amp;= \left(\frac{\vert X\vert}{N}\right)^i \cdot \left( 1 - \frac{\vert X\vert}{N} \right) \\
   &amp;\leq \left(\frac{k-1}{N}\right)^i \cdot 1
  \end{align}
  $$
  Using this probability bound, the expected number of items drawn is:
  $$
  \begin{align}
    \mathbb{E}[\text{# of items drawn}] \leq k &amp;+ \mathbb{E}[\text{# of draws to increment }\vert X\vert=1\text{ by 1}] \\
                                         &amp;+ \cdots \\
                                         &amp;+ \mathbb{E}[\text{# of draws to increment }\vert X\vert=(k-1)\text{ by 1}] \\
                                          \leq k &amp;+ (k-1)\sum_{i=1}^\infty i\left(\frac{k-1}{N}\right)^{i}
  \end{align}
  $$
  Since in the worst case the same item is drawn $k$ times in line 1 of the algorithm and then we have to draw $(k-1)$ unique items in the while loop.
&lt;p&gt;We now note that the algorithm requires $N\geq (2 + \sqrt{2})\cdot k$, so:
$$
\begin{align}
N \geq (2 + \sqrt{2}&amp;amp;)\cdot k \geq 2\cdot k \newline
\frac{k-1}{N} &amp;amp;\leq 2^{-1} \newline
&amp;amp;\downarrow \newline
\mathbb{E}[\text{# of items drawn}] &amp;amp;\leq k + (k-1) \sum_{i=1}^\infty i\cdot2^{-i} \newline
&amp;amp;= k + k\cdot 2 \newline
&amp;amp;= O(k)
\end{align}
$$&lt;/p&gt;
  &lt;div class=&#34;lemma-qed&#34;&gt;$\square$&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Note that sets in Python have $O(1)$ lookup and insert times, required for lines 5 and 6 in the algorithm.&lt;/p&gt;
&lt;p&gt;However, this is not all. We have used the fact that $N \geq 2k$ in our proof, but now let&amp;rsquo;s generalize to $N \geq ak$ with $a &amp;gt; 1$. Note that $a=1$ would include the possibility that $N=k$, in which we just sample all items in the universe of size $N$, and this is not interesting for our purposes. Also, $a&amp;lt;1$ includes cases where $N&amp;lt;k$, which is impossible and our algorithm would not halt.&lt;/p&gt;
&lt;div class=&#34;lemma&#34;&gt;
  &lt;b&gt;Lemma 1&lt;/b&gt;&amp;ensp; &lt;i&gt;If $N\geq ak$ for $a&gt;1$, the expected number of items drawn is less than $k + (k-1)\cdot a/(a-1)^2$&lt;/i&gt;.
  &lt;br/&gt;
  &lt;br/&gt;
  &lt;i&gt;Proof.&lt;/i&gt; $N\geq ak$ implies that,
  $$
  \begin{align}
  \frac{k-1}{N} &amp;\leq a^{-1} \\
                &amp;\downarrow \\
  \mathbb{E}[\text{# of items drawn}] &amp;\leq k + (k-1) \sum_{i=1}^\infty i\cdot a^{-i} \\
                &amp;= k + (k-1)\frac{a}{(a-1)^2}
  \end{align}
  $$
  Since,
  $$
  \sum_{i=1}^\infty i\cdot a^{-i} = \frac{a}{(a-1)^2} \qquad \forall a, \vert a\vert &gt; 1
  $$
  &lt;div class=&#34;lemma-qed&#34;&gt;$\square$&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;With this lemma we can prove the following theorem:&lt;/p&gt;
&lt;div class=&#34;lemma&#34;&gt;
  &lt;b&gt;Theorem 3&lt;/b&gt;&amp;ensp; Algorithm 1 &lt;i&gt;draws O(3k) items w.p.&lt;/i&gt; (with probability)&lt;i&gt; less than $(k-1)/N$&lt;/i&gt;.
  &lt;br/&gt;
  &lt;br/&gt;
  &lt;i&gt;Proof.&lt;/i&gt; We define $Y := (\text{# of items drawn} - k)$, which is the amount of items drawn in the while loop. We recall &lt;a href=&#34;https://en.wikipedia.org/wiki/Markov%27s_inequality&#34; target=&#34;_blank&#34;&gt;Markov&#39;s inequality&lt;/a&gt;:
  $$
  P\left[ Y \geq \delta\cdot \mathbb{E}[Y] \right] \leq \frac{1}{\delta} \qquad \delta &gt; 0
  $$
  So that, using Lemma 1,
  $$
P\left[ Y \geq \delta\cdot (k-1) \cdot \frac{a}{(a-1)^2} \right] \leq P\left[ Y \geq \delta\cdot \mathbb{E}[Y] \right] \leq \frac{1}{\delta}
  $$
  Now, we define $\beta&gt;0$ s.t. $k\beta = N\cdot a/(a-1)^2$, which implies, by setting $\delta = N/(k-1)$,
  $$
  P\left[ Y \geq k\beta \right] \leq P\left[ Y \geq N \cdot \frac{a}{(a-1)^2} \right] \leq \frac{k-1}{N}
  $$
  We also note that,
  $$
  \beta \geq \frac{a^2}{(a-1)^2} \qquad \text{since }N\geq ak
  $$
  And,
  $$
  \frac{a^2}{(a-1)^2} = \left(1 - \frac{1}{a}\right)^{-2} \leq \left(1 - \frac{k}{N}\right)^{-2} \qquad \forall k\geq 1,~a&gt;1
  $$
  Thus finally,
  $$
    P\left[ Y \geq k\cdot\left(1-\frac{k}{N}\right)^{-2} \right] \leq \frac{k-1}{N}
  $$
  We can now apply our algorithm requirement $N \geq (2 + \sqrt{2})\cdot k$ so we get,
  $$
   N \geq \left(2 + \sqrt{2}\right)\cdot k \quad \rightarrow \quad \left(1-\frac{k}{N}\right)^{-2} \leq \left(1-\frac{1}{2 + \sqrt{2}}\right)^{-2} = 2
  $$
  Thus, in the worst case we always draw $O(k+2k)=O(3k)$ items w.p. less than $(k-1)/N$.
  &lt;div class=&#34;lemma-qed&#34;&gt;$\square$&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is very useful. It means that if $N$ is massive and $k$ is miniscule in comparison, we won&amp;rsquo;t draw more than $3k$ items with high probability. In fact, if $N$ is 100 times $k$, then we will draw $2.021\cdot k$ items w.p. less than ~1%.&lt;/p&gt;
&lt;p&gt;This is definitely better than the original algorithm, which when creating the array of length $N$ had to spend $O(N)$ time.&lt;/p&gt;
&lt;p&gt;To end this little exploration, note that in general if we had chosen $\delta=N/(k-1)k^\gamma$ for some $\gamma&amp;gt;0$, then we would have that the algorithm is $O\left(k+k^{1+\beta}\left(1-\frac{k}{N}\right)^{-2}\right)$ w.p. less than $k^{1-\beta}/N$.&lt;/p&gt;
&lt;p&gt;For example, the algorithm is $O(k^2)$ w.p. less than $1/N$. This means that drawing 10 items without replacement from a universe of 1&#39;000 items using this algorithm will require drawing 113 items w.p. less than 0.1%.&lt;/p&gt;
&lt;h2 id=&#34;example-use-case&#34;&gt;Example use-case&lt;/h2&gt;
&lt;p&gt;But, when do we have a massive $N$ in practice?&lt;/p&gt;
&lt;p&gt;Let me present the original problem I was trying to solve which required me to create my own &lt;em&gt;choice&lt;/em&gt; function: a memory-efficient implementation to sample without replacement &lt;a href=&#34;https://docs.python.org/3/library/itertools.html#itertools.product&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;itertools.product()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say that you have multiple iterables that can be indexed in Python and you want to sample $k$ random permutations of their items.&lt;/p&gt;
&lt;p&gt;Since the space of all permutations is prohibitively large, we cannot simply generate &lt;em&gt;all&lt;/em&gt; permutations first and then sample $k$ of them.&lt;/p&gt;
&lt;p&gt;The solution is to use our $choice(N, k)$ function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;random_product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterables&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Memory efficient way to sample ``itertools.product`` at random without replacement.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;lens&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;it&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterables&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# N is usually extremely large!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;N&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lens&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unravel_index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                           &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lens&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterables&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterables&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Cloning Arch Linux hard disk remotely to new machine</title>
      <link>https://sager611.github.io/post/clone-arch-disk/</link>
      <pubDate>Tue, 07 Mar 2023 14:51:07 +0100</pubDate>
      <guid>https://sager611.github.io/post/clone-arch-disk/</guid>
      <description>&lt;p&gt;I recently bought a new laptop with Windows 11 and wanted to migrate my whole hard drive contents from my old laptop with an Arch Linux installation.&lt;/p&gt;
&lt;p&gt;Follow this tutorial if you want to clone your old laptop&amp;rsquo;s hard drive to your new laptop&amp;rsquo;s hard drive via SSH in &lt;strong&gt;the same local network&lt;/strong&gt;.&lt;/p&gt;


&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Table of Contents&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#boot-from-live-usb&#34;&gt;Boot from Live USB&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#setup-ssh&#34;&gt;Setup SSH&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#clone-hard-disk-via-ssh&#34;&gt;Clone hard disk via SSH&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;

&lt;h2 id=&#34;boot-from-live-usb&#34;&gt;Boot from Live USB&lt;/h2&gt;
&lt;p&gt;In our &lt;strong&gt;new&lt;/strong&gt; machine we will run all commands from a live USB Arch Linux image.&lt;/p&gt;
&lt;p&gt;Follow &lt;a href=&#34;https://wiki.archlinux.org/title/USB_flash_installation_medium&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the official Arch Linux tutorial to boot an Arch Linux image from an USB&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you have your live USB, plug it in your &lt;strong&gt;new&lt;/strong&gt; laptop and go to the boot menu.&lt;/p&gt;
&lt;p&gt;In my case, I have a Thinkpad and I had to press &lt;code&gt;enter&lt;/code&gt; and then &lt;code&gt;F12&lt;/code&gt; when powering on the laptop.&lt;/p&gt;
&lt;p&gt;I also had to &lt;a href=&#34;https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/disabling-secure-boot?view=windows-11&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;disable Secure Boot&lt;/a&gt; beforehand to boot from my live USB.&lt;/p&gt;
&lt;p&gt;Make sure to connect to the same local wifi network in both machines before continuing.&lt;/p&gt;
&lt;h2 id=&#34;setup-ssh&#34;&gt;Setup SSH&lt;/h2&gt;
&lt;p&gt;The following commands are executed as root user.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;su&lt;/code&gt; on your &lt;strong&gt;old&lt;/strong&gt; machine to become root user.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Check IP address of &lt;strong&gt;new&lt;/strong&gt; machine with &lt;code&gt;ip address&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;root@archiso ~ &lt;span class=&#34;c1&#34;&gt;# ip address&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;...&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;4: wlan0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class=&#34;m&#34;&gt;1500&lt;/span&gt; qdisc noqueue state UP group default qlen &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    link/ether a0:59:50:e1:5f:9b brd ff:ff:ff:ff:ff:ff
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    inet 192.168.1.76/24 metric &lt;span class=&#34;m&#34;&gt;600&lt;/span&gt; brd 192.168.1.255 scope global dynamic wlan0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       valid_lft 39244sec preferred_lft 39244sec
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    inet6 fe80::a259:50ff:fee1:5f9b/64 scope link
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       valid_lft forever preferred_lft forever
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our local ip in this example is &lt;code&gt;192.168.1.76&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start ssh service in &lt;strong&gt;new&lt;/strong&gt; machine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;systemctl start sshd.service
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set the &lt;code&gt;root&lt;/code&gt; password with &lt;code&gt;passwd&lt;/code&gt;. Simply run &lt;code&gt;passwd&lt;/code&gt; in your &lt;strong&gt;new&lt;/strong&gt; machine.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now we setup ssh so it &lt;a href=&#34;https://www.pragmaticlinux.com/2021/05/configure-ssh-for-login-without-a-password/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;doesn&amp;rsquo;t ask for password when connecting to our new machine&lt;/a&gt;. In your &lt;strong&gt;old&lt;/strong&gt; machine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh-keygen -t ed25519
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh-copy-id -i .ssh/id_thinkpadp15.pub root@192.168.1.76
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In my case it looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@thinkpad-t440s ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;$ ssh-keygen -t ed25519
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Generating public/private ed25519 key pair.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Enter file in which to save the key &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;/home/saheru/.ssh/id_ed25519&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: .ssh/id_thinkpadp15
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Enter passphrase &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;empty &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; no passphrase&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Enter same passphrase again:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Your identification has been saved in .ssh/id_thinkpadp15
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Your public key has been saved in .ssh/id_thinkpadp15.pub
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;The key fingerprint is:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SHA256:DJ74VMCmqQ6nB//xZkPhSmPZRR00lVqskcZ2TH5N5wc saheru@thinkpad-t440s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;The key&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;s randomart image is:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+--&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;ED25519 256&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;--+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     ..  ++Bo.E o&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;      o.. Bo*  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;.&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     +...o *. . +&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;    oo.&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;. o  .  .&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   ..++oS        &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;o &lt;span class=&#34;nv&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;o+          &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; B o.+.          &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;. + .o+          &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; . ..o..         &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+----&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;SHA256&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;-----+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@thinkpad-t440s ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;$ ssh-copy-id -i .ssh/id_thinkpadp15.pub root@192.168.1.76
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that I named my key &lt;code&gt;.ssh/id_thinkpadp15&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The last command will ask for the &lt;code&gt;root&lt;/code&gt; password, which is the one we have set in the previous step.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Append your new machine&amp;rsquo;s IP with the corresponding private key in your &lt;strong&gt;old&lt;/strong&gt; machine&amp;rsquo;s &lt;code&gt;.ssh/config&lt;/code&gt; (create the file if it doesn&amp;rsquo;t exist), in my case:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Host 192.168.1.76
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  HostName 192.168.1.76
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  User root
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  IdentityFile ~/.ssh/id_thinkpadp15
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now ssh won&amp;rsquo;t prompt for a password when we connect to our new machine.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;clone-hard-disk-via-ssh&#34;&gt;Clone hard disk via SSH&lt;/h2&gt;
&lt;p&gt;We will use the &lt;code&gt;dd&lt;/code&gt; command from &lt;code&gt;coreutils&lt;/code&gt; and &lt;code&gt;ssh&lt;/code&gt; to remotely clone our hard disk from our &lt;strong&gt;old&lt;/strong&gt; machine to our &lt;strong&gt;new&lt;/strong&gt; machine.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Check &lt;a href=&#34;https://wiki.archlinux.org/title/Dd#Disk_cloning_and_restore&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the official Arch wiki for more info on cloning with &lt;code&gt;dd&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    The following commands completely erase the &lt;strong&gt;new&lt;/strong&gt; machine&amp;rsquo;s hard disk contents! Make sure to save a backup image.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;First, make sure you have enough space in your new hard disk. You can check this by running &lt;code&gt;lsblk&lt;/code&gt; on your old and new machines.&lt;/p&gt;
&lt;p&gt;Also make sure your hard disk in your &lt;strong&gt;new&lt;/strong&gt; machine is unmounted with &lt;code&gt;lsblk&lt;/code&gt; (&lt;code&gt;MOUNTPOINTS&lt;/code&gt; should be empty).&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    In my case the hard disk in my &lt;strong&gt;new&lt;/strong&gt; machine was &lt;code&gt;nvme0n1&lt;/code&gt;. Make sure you choose the correct disk by looking at &lt;code&gt;SIZE&lt;/code&gt; in &lt;code&gt;lsblk&lt;/code&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To avoid corrupting files during cloning, you should run the following command from another live USB in your &lt;strong&gt;old&lt;/strong&gt; machine and make sure your hard drive &lt;code&gt;sda&lt;/code&gt; is unmounted.&lt;/p&gt;
&lt;p&gt;Run the following in your &lt;strong&gt;old&lt;/strong&gt; machine to clone the disk:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;dd &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/dev/sda &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; ssh root@192.168.1.76 dd &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/dev/nvme0n1 &lt;span class=&#34;nv&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;progress
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Change the IP, and &lt;code&gt;sda&lt;/code&gt; and &lt;code&gt;nvme0n1&lt;/code&gt; according to your source and destination disk names.&lt;/p&gt;
&lt;p&gt;It will take 5-10h to clone a 512GB SSD. Once it finishes, you will have copied all the contents from your old machine to your new machine, including &lt;a href=&#34;https://wiki.archlinux.org/title/GRUB&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GRUB&lt;/a&gt; and &lt;a href=&#34;https://wiki.archlinux.org/title/Dm-crypt/Encrypting_an_entire_system&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LUKS&lt;/a&gt; (also with logical volumes) if you had them setup.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visualizing transfer functions in p5.js</title>
      <link>https://sager611.github.io/post/p5js-vis-transfer-function/</link>
      <pubDate>Mon, 27 Feb 2023 16:51:17 +0100</pubDate>
      <guid>https://sager611.github.io/post/p5js-vis-transfer-function/</guid>
      <description>&lt;!--CSS--&gt;
&lt;style&gt;
.resizer { display:flex; margin:0; padding:0; resize:vertical; overflow:hidden }
.resizer &gt; .resized { flex-grow:1; margin:0; padding:0; border:0 }
.ugly { background:red; border:4px dashed black; }
.visualizer { width: 100%; height: 800px; }
&lt;/style&gt;
&lt;p&gt;In 2020 I was following lectures on &lt;a href=&#34;https://didattica.polito.it/pls/portal30/gap.pkg_guide.viewGap?p_cod_ins=06LSLLM&amp;amp;p_a_acc=2020&amp;amp;p_header=S&amp;amp;p_lang=IT&amp;amp;multi=N&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;automatic control&lt;/a&gt; and learned about the &lt;a href=&#34;https://en.wikipedia.org/wiki/Transfer_function&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;transfer function&lt;/a&gt; of a system and ways to visualize it, at which point I was curious so I went ahead and wrote a simple visualizer for generic transfer functions.&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&#34;#visualizer&#34;&gt;jump ahead to the visualizer&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;The basic idea is that we can build a system with a feedback loop that takes an input signal 

$x(t)$ and outputs another signal 

$y(t)$:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34;
           src=&#34;https://sager611.github.io/post/p5js-vis-transfer-function/simple-feedback.svg&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;We then focus on &lt;a href=&#34;https://en.wikipedia.org/wiki/Linear_time-invariant_system&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;linear time-invariant (LTI)&lt;/a&gt; transformations, which in a few words are those which take as input 

$e(t)$ and output 

$y(t) = (e \ast h)(t)$, where 

$h(t)$ is called the &lt;a href=&#34;https://en.wikipedia.org/wiki/Impulse_response&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;impulse response&lt;/a&gt; since it is exactly the value of the output 

$y(t)$ if our input where an impulse 

$e(t)=\delta(t)$.&lt;/p&gt;
&lt;p&gt;In the Laplace function space, the convolution of our transformation becomes a multiplication 

$Y(s) = H(s)E(s)$.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s plug in our 

$H(s)$ in the feedback loop!&lt;/p&gt;
&lt;p&gt;We recursively apply it so we end up with:&lt;/p&gt;


$$
\begin{align*}
Y(s) &amp;= \left( H(s) + H(s)^2 + H(s)^3 + \dots \right) \cdot X(s) \\
     &amp;= \frac{H(s)}{1 - H(s)} \cdot X(s)
\end{align*}
$$
&lt;h2 id=&#34;visualizer&#34;&gt;Visualizer&lt;/h2&gt;
&lt;p&gt;Note that if our 

$H(s)$ touches the value 1 we&amp;rsquo;ll end up with an 

$\infty$, oops.&lt;/p&gt;
&lt;p&gt;So, when designing 

$H(s)$ we want to make sure that it is some distance away from 1.&lt;/p&gt;
&lt;p&gt;But 

$H: \mathbb{C} \rightarrow \mathbb{C}$, how can we visualize it?&lt;/p&gt;
&lt;p&gt;Well, there are multiple approaches and this is where I got curious and decided to write a visualizer in &lt;a href=&#34;https://editor.p5js.org/adriansagerlaganga/full/9CeBgb-Pv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;p5.js&lt;/a&gt;. I included a cartesian plot and a &lt;a href=&#34;https://en.wikipedia.org/wiki/Nichols_plot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nichols plot&lt;/a&gt;. Other common plots include &lt;a href=&#34;https://en.wikipedia.org/wiki/Bode_plot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bode&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Nyquist_plot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nyquist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also included a simple &lt;a href=&#34;https://en.wikipedia.org/wiki/Abstract_syntax_tree&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;abstract syntax tree (AST)&lt;/a&gt; parser and traversal so you can write any 

$H(s)$ you want and see what happens!&lt;/p&gt;
&lt;p&gt;You can try it out right here:&lt;/p&gt;
&lt;iframe class=&#34;visualizer&#34; src=&#34;src/index.html&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;Controls:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-arrows-alt  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Drag to move around.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-arrows-alt-v  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Mouse wheel to zoom in/out.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-keyboard  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Space to reset offset.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;You may encounter some bugs if you introduce incorrect&lt;/p&gt;
&lt;p&gt;$H(s)$ and the visualizer may crash. Use with care.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
