<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Adrián Sager La Ganga</title>
    <link>https://sager611.github.io/</link>
      <atom:link href="https://sager611.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>Adrián Sager La Ganga</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Fri, 17 Feb 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://sager611.github.io/media/icon_hu4c33f529594115c732c21d26133ca9c2_321136_512x512_fill_lanczos_center_3.png</url>
      <title>Adrián Sager La Ganga</title>
      <link>https://sager611.github.io/</link>
    </image>
    
    <item>
      <title>Memory efficient numpy.random.choice()</title>
      <link>https://sager611.github.io/post/memory-efficient-choice-function/</link>
      <pubDate>Tue, 23 May 2023 15:02:50 +0200</pubDate>
      <guid>https://sager611.github.io/post/memory-efficient-choice-function/</guid>
      <description>&lt;!--CSS--&gt;
&lt;style&gt;
.algo-container {
  margin: auto;
  margin-top: 2em;
  margin-bottom: 2em;
  width: 90%;
}
.algo-hr-top { height:3px;  }
.algo-hr-mid { height:1px; }
.algo-hr-bottom { height:3px;  }

.lemma {
  margin: auto;
  margin-top: 2em;
  margin-bottom: 2em;
  width: 90%;
  overflow-x:auto;
}
.lemma-qed { margin-left:95%; }
&lt;/style&gt;
&lt;p&gt;NumPy&amp;rsquo;s &lt;a href=&#34;https://numpy.org/doc/1.24/reference/random/generated/numpy.random.choice.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;numpy.random.choice()&lt;/code&gt;&lt;/a&gt; method samples items at random from an array.&lt;/p&gt;
&lt;p&gt;Unfortunately, sampling &lt;em&gt;without&lt;/em&gt; replacement an &lt;code&gt;int&lt;/code&gt; from $0$ to $N-1$ requires $O(N)$ memory. Thus, the following code will result in an OOM error (if not completely crash your machine):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;np&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1_000_000_000_000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is because &lt;code&gt;numpy.random.choice()&lt;/code&gt; creates (at least up to NumPy version 1.24) an array of size $N$ (in our example, ~465 GB !), as it can be seen in the &lt;a href=&#34;https://github.com/numpy/numpy/blob/1e8b589033e1ce2add835840ccdc259e5e1fa4d0/numpy/random/mtrand.pyx#L841&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source code&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;# pop_size == a when `a` is an `int`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;permutation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pop_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ndim&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;permutation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;isinstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;integer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# this creates an array of size `x`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shuffle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, intuitively we shouldn&amp;rsquo;t need to create an array of size $N$ if we are sampling a small amount of items $k$, right?&lt;/p&gt;
&lt;p&gt;We could simply keep sampling &lt;em&gt;with&lt;/em&gt; replacement (which doesn&amp;rsquo;t require $O(N)$ memory) until we have an array of $k$ different items.&lt;/p&gt;
&lt;p&gt;This very basic and straightforward algorithm would be defined as follows:&lt;/p&gt;
&lt;div class=&#34;algo-container&#34;&gt;
&lt;hr class=&#34;algo-hr-top&#34;&gt;
&lt;b&gt;Algorithm 1&lt;/b&gt; An algorithm to draw without replacement. $k&gt;0$ items are taken without replacement from a universe of size $N$. $choice(N, k)$ samples $k$ items with replacement with a space complexity of $O(k \log{N})$:
&lt;hr class=&#34;algo-hr-mid&#34;&gt;
&lt;b&gt;Require: &lt;/b&gt; $N \geq (2 + \sqrt{2}) \cdot k$
&lt;p&gt;1:   $X \leftarrow \{choice(N,1)\}$ &lt;br/&gt;
2:   &lt;b&gt;while &lt;/b&gt;$\vert X\vert \neq k$&lt;b&gt; do&lt;/b&gt; &lt;br/&gt;
3:     $s \leftarrow choice(N, 1)$ &lt;br/&gt;
4:     &lt;b&gt;if &lt;/b&gt;$s \notin X$&lt;b&gt; then&lt;/b&gt; &lt;br/&gt;
5:       $X \leftarrow X \cup \left\{ s \right\}$ &lt;br/&gt;
6:     &lt;b&gt;end if&lt;/b&gt; &lt;br/&gt;
7:   &lt;b&gt;end while&lt;/b&gt; &lt;br/&gt;&lt;/p&gt;
&lt;hr class=&#34;algo-hr-bottom&#34;&gt;
&lt;/div&gt;
&lt;p&gt;Which in code looks like,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Sample `k` elements from 0 to `N-1` with or without replacement.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;N&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.414213562373095&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But why require that $N \geq (2 + \sqrt{2})\cdot k$? We will figure it out by proving a couple of theorems:&lt;/p&gt;
&lt;div class=&#34;lemma&#34;&gt;
  &lt;b&gt;Theorem 1&lt;/b&gt;&amp;ensp; Algorithm 1 &lt;i&gt;has a space complexity of $O(k \log{N})$&lt;/i&gt;.
  &lt;br/&gt;
  &lt;br/&gt;
  &lt;i&gt;Proof.&lt;/i&gt; Both $X$ and $choice(N, k)$ occupy $O(k \log{N})$ space, since $\vert X\vert$ is at most $k$ and our largest number, $N$, requires $O(\log{N})$ bits to be stored.
  &lt;div class=&#34;lemma-qed&#34;&gt;$\square$&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This one was very simple. But, how about time complexity?&lt;/p&gt;
&lt;div class=&#34;lemma&#34;&gt;
  &lt;b&gt;Theorem 2&lt;/b&gt;&amp;ensp; Algorithm 1 &lt;i&gt;has an expected time complexity of $O(k)$, i.e., it has a time complexity of $\Theta(k)$&lt;/i&gt;.
  &lt;br/&gt;
  &lt;br/&gt;
  &lt;i&gt;Proof.&lt;/i&gt; In order to advance in the while loop, we need to add new elements to $X$. Thus:
  $$
  \begin{align}
  P\left[\text{sampling unique item after }i+1\text{ draws}\right] &amp;= \left(\frac{\vert X\vert}{N}\right)^i \cdot \left( 1 - \frac{\vert X\vert}{N} \right) \\
   &amp;\leq \left(\frac{k-1}{N}\right)^i \cdot 1
  \end{align}
  $$
  Using this probability bound, the expected number of items drawn is:
  $$
  \begin{align}
    \mathbb{E}[\text{# of items drawn}] \leq 1 &amp;+ \mathbb{E}[\text{# of draws to increment }\vert X\vert=1\text{ by 1}] \\
                                         &amp;+ \cdots \\
                                         &amp;+ \mathbb{E}[\text{# of draws to increment }\vert X\vert=(k-1)\text{ by 1}] \\
                                          \leq 1 &amp;+ (k-1)\sum_{i=1}^\infty i\left(\frac{k-1}{N}\right)^{i}
  \end{align}
  $$
  Since we have to draw 1 item in line 1 of the algorithm and then we have to draw $(k-1)$ new unique items in the while loop.
&lt;p&gt;We now note that the algorithm requires that $N\geq (2 + \sqrt{2})\cdot k$, so:
$$
\begin{align}
N \geq (2 + \sqrt{2}&amp;amp;)\cdot k \geq 2\cdot k \newline
\frac{k-1}{N} &amp;amp;\leq 2^{-1} \newline
&amp;amp;\downarrow \newline
\mathbb{E}[\text{# of items drawn}] &amp;amp;\leq 1 + (k-1) \sum_{i=1}^\infty i\cdot2^{-i} \newline
&amp;amp;= 1 + k\cdot 2 \newline
&amp;amp;= O(k)
\end{align}
$$&lt;/p&gt;
  &lt;div class=&#34;lemma-qed&#34;&gt;$\square$&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Note that sets in Python have $O(1)$ lookup and insert times, required for lines 4 and 5 in the algorithm.&lt;/p&gt;
&lt;p&gt;However, this is not all. We have used the fact that $N \geq 2k$ in our proof, but now let&amp;rsquo;s generalize to $N \geq ak$ with $a &amp;gt; 1$. Note that $a=1$ would include the possibility that $N=k$, in which we just sample all items in the universe of size $N$, and this is not interesting for our purposes. Also, $a&amp;lt;1$ includes cases where $N&amp;lt;k$, which is impossible and our algorithm would not halt.&lt;/p&gt;
&lt;div class=&#34;lemma&#34;&gt;
  &lt;b&gt;Lemma 1&lt;/b&gt;&amp;ensp; &lt;i&gt;If $N\geq ak$ for $a&gt;1$, the expected number of items drawn is less than $k + (k-1)\cdot a/(a-1)^2$&lt;/i&gt;.
  &lt;br/&gt;
  &lt;br/&gt;
  &lt;i&gt;Proof.&lt;/i&gt; $N\geq ak$ implies that,
  $$
  \begin{align}
  \frac{k-1}{N} &amp;\leq a^{-1} \\
                &amp;\downarrow \\
  \mathbb{E}[\text{# of items drawn}] &amp;\leq 1 + (k-1) \sum_{i=1}^\infty i\cdot a^{-i} \\
                &amp;= 1 + (k-1)\frac{a}{(a-1)^2}
  \end{align}
  $$
  Since,
  $$
  \sum_{i=1}^\infty i\cdot a^{-i} = \frac{a}{(a-1)^2} \qquad \forall a, \vert a\vert &gt; 1
  $$
  &lt;div class=&#34;lemma-qed&#34;&gt;$\square$&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;With this lemma we can prove the following theorem:&lt;/p&gt;
&lt;div class=&#34;lemma&#34;&gt;
  &lt;b&gt;Theorem 3&lt;/b&gt;&amp;ensp; Algorithm 1 &lt;i&gt;draws O(2k) items w.p.&lt;/i&gt; (with probability)&lt;i&gt; less than $(k-1)/N$&lt;/i&gt;.
  &lt;br/&gt;
  &lt;br/&gt;
  &lt;i&gt;Proof.&lt;/i&gt; We define $Y := (\text{# of items drawn} - 1)$, which is the amount of items drawn in the while loop. We recall &lt;a href=&#34;https://en.wikipedia.org/wiki/Markov%27s_inequality&#34; target=&#34;_blank&#34;&gt;Markov&#39;s inequality&lt;/a&gt;:
  $$
  P\left[ Y \geq \delta\cdot \mathbb{E}[Y] \right] \leq \frac{1}{\delta} \qquad \delta &gt; 0
  $$
  So that, using Lemma 1,
  $$
P\left[ Y \geq \delta\cdot (k-1) \cdot \frac{a}{(a-1)^2} \right] \leq P\left[ Y \geq \delta\cdot \mathbb{E}[Y] \right] \leq \frac{1}{\delta}
  $$
  Now, we set $\delta = N/(k-1)$, and consider the maximum value of $a$, $a^*=N/k$,
  $$
  P\left[ Y \geq N \cdot \frac{a^*}{(a^*-1)^2} \right] \leq \frac{k-1}{N}
  $$
  Note that this is true since Lemma 1 still applies when $a=a^*$. We now observe that,
  $$
  N \frac{a^*}{(a^*-1)^2} = k\frac{N^2}{(N-k)^2} = k\left(1 - \frac{k}{N}\right)^{-2}
  $$
&lt;p&gt;Thus finally,
$$
P\left[ Y \geq k\cdot\left(1-\frac{k}{N}\right)^{-2} \right] \leq \frac{k-1}{N}
$$
We can now apply our algorithm requirement $N \geq (2 + \sqrt{2})\cdot k$ so we get,
$$
N \geq \left(2 + \sqrt{2}\right)\cdot k \quad \rightarrow \quad \left(1-\frac{k}{N}\right)^{-2} \leq \left(1-\frac{1}{2 + \sqrt{2}}\right)^{-2} = 2
$$
Thus, in the worst case we always draw $O(1+2k)=O(2k)$ items w.p. less than $(k-1)/N$.&lt;/p&gt;
  &lt;div class=&#34;lemma-qed&#34;&gt;$\square$&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is very useful. It means that if $N$ is massive and $k$ is miniscule in comparison, we won&amp;rsquo;t draw more than $1+2k$ items with high probability. In fact, if $N$ is 100 times $k$, then we will draw $1+1.021\cdot k$ items w.p. less than ~1%.&lt;/p&gt;
&lt;p&gt;This is definitely better than the original algorithm, which when creating the array of length $N$ had to spend $O(N)$ time.&lt;/p&gt;
&lt;p&gt;To end this little exploration, note that in general if we had chosen $\delta=N/(k-1)k^\gamma$ for some $\gamma&amp;gt;0$, then we would have that the algorithm is $O\left(1+k^{1+\beta}\left(1-\frac{k}{N}\right)^{-2}\right)$ w.p. less than $k^{1-\beta}/N$.&lt;/p&gt;
&lt;p&gt;For example, the algorithm is $O(k^2)$ w.p. less than $1/N$. This means that drawing 10 items without replacement from a universe of 1&#39;000 items using this algorithm will require drawing 103 items w.p. less than 0.1%.&lt;/p&gt;
&lt;h2 id=&#34;example-use-case&#34;&gt;Example use-case&lt;/h2&gt;
&lt;p&gt;But, when do we have a massive $N$ in practice?&lt;/p&gt;
&lt;p&gt;Let me present the original problem I was trying to solve which required me to create my own &lt;em&gt;choice&lt;/em&gt; function: a memory-efficient implementation to sample without replacement &lt;a href=&#34;https://docs.python.org/3/library/itertools.html#itertools.product&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;itertools.product()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say that you have multiple iterables that can be indexed in Python and you want to sample $k$ random permutations of their items.&lt;/p&gt;
&lt;p&gt;Since the space of all permutations is prohibitively large, we cannot simply generate &lt;em&gt;all&lt;/em&gt; permutations first and then sample $k$ of them.&lt;/p&gt;
&lt;p&gt;The solution is to use our $choice(N, k)$ function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;random_product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterables&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Memory efficient way to sample ``itertools.product`` at random without replacement.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;lens&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;it&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterables&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# N is usually extremely large!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;N&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lens&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unravel_index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                           &lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lens&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterables&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterables&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Cloning Arch Linux hard disk remotely to new machine</title>
      <link>https://sager611.github.io/post/clone-arch-disk/</link>
      <pubDate>Tue, 07 Mar 2023 14:51:07 +0100</pubDate>
      <guid>https://sager611.github.io/post/clone-arch-disk/</guid>
      <description>&lt;p&gt;I recently bought a new laptop with Windows 11 and wanted to migrate my whole hard drive contents from my old laptop with an Arch Linux installation.&lt;/p&gt;
&lt;p&gt;Follow this tutorial if you want to clone your old laptop&amp;rsquo;s hard drive to your new laptop&amp;rsquo;s hard drive via SSH in &lt;strong&gt;the same local network&lt;/strong&gt;.&lt;/p&gt;


&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Table of Contents&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#boot-from-live-usb&#34;&gt;Boot from Live USB&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#setup-ssh&#34;&gt;Setup SSH&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#clone-hard-disk-via-ssh&#34;&gt;Clone hard disk via SSH&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;

&lt;h2 id=&#34;boot-from-live-usb&#34;&gt;Boot from Live USB&lt;/h2&gt;
&lt;p&gt;In our &lt;strong&gt;new&lt;/strong&gt; machine we will run all commands from a live USB Arch Linux image.&lt;/p&gt;
&lt;p&gt;Follow &lt;a href=&#34;https://wiki.archlinux.org/title/USB_flash_installation_medium&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the official Arch Linux tutorial to boot an Arch Linux image from an USB&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you have your live USB, plug it in your &lt;strong&gt;new&lt;/strong&gt; laptop and go to the boot menu.&lt;/p&gt;
&lt;p&gt;In my case, I have a Thinkpad and I had to press &lt;code&gt;enter&lt;/code&gt; and then &lt;code&gt;F12&lt;/code&gt; when powering on the laptop.&lt;/p&gt;
&lt;p&gt;I also had to &lt;a href=&#34;https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/disabling-secure-boot?view=windows-11&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;disable Secure Boot&lt;/a&gt; beforehand to boot from my live USB.&lt;/p&gt;
&lt;p&gt;Make sure to connect to the same local wifi network in both machines before continuing.&lt;/p&gt;
&lt;h2 id=&#34;setup-ssh&#34;&gt;Setup SSH&lt;/h2&gt;
&lt;p&gt;The following commands are executed as root user.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;su&lt;/code&gt; on your &lt;strong&gt;old&lt;/strong&gt; machine to become root user.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Check IP address of &lt;strong&gt;new&lt;/strong&gt; machine with &lt;code&gt;ip address&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;root@archiso ~ &lt;span class=&#34;c1&#34;&gt;# ip address&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;...&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;4: wlan0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class=&#34;m&#34;&gt;1500&lt;/span&gt; qdisc noqueue state UP group default qlen &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    link/ether a0:59:50:e1:5f:9b brd ff:ff:ff:ff:ff:ff
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    inet 192.168.1.76/24 metric &lt;span class=&#34;m&#34;&gt;600&lt;/span&gt; brd 192.168.1.255 scope global dynamic wlan0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       valid_lft 39244sec preferred_lft 39244sec
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    inet6 fe80::a259:50ff:fee1:5f9b/64 scope link
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       valid_lft forever preferred_lft forever
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our local ip in this example is &lt;code&gt;192.168.1.76&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start ssh service in &lt;strong&gt;new&lt;/strong&gt; machine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;systemctl start sshd.service
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set the &lt;code&gt;root&lt;/code&gt; password with &lt;code&gt;passwd&lt;/code&gt;. Simply run &lt;code&gt;passwd&lt;/code&gt; in your &lt;strong&gt;new&lt;/strong&gt; machine.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now we setup ssh so it &lt;a href=&#34;https://www.pragmaticlinux.com/2021/05/configure-ssh-for-login-without-a-password/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;doesn&amp;rsquo;t ask for password when connecting to our new machine&lt;/a&gt;. In your &lt;strong&gt;old&lt;/strong&gt; machine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh-keygen -t ed25519
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh-copy-id -i .ssh/id_thinkpadp15.pub root@192.168.1.76
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In my case it looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@thinkpad-t440s ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;$ ssh-keygen -t ed25519
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Generating public/private ed25519 key pair.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Enter file in which to save the key &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;/home/saheru/.ssh/id_ed25519&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: .ssh/id_thinkpadp15
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Enter passphrase &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;empty &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; no passphrase&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Enter same passphrase again:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Your identification has been saved in .ssh/id_thinkpadp15
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Your public key has been saved in .ssh/id_thinkpadp15.pub
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;The key fingerprint is:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SHA256:DJ74VMCmqQ6nB//xZkPhSmPZRR00lVqskcZ2TH5N5wc saheru@thinkpad-t440s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;The key&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;s randomart image is:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+--&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;ED25519 256&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;--+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     ..  ++Bo.E o&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;      o.. Bo*  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;.&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     +...o *. . +&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;    oo.&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;. o  .  .&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   ..++oS        &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;o &lt;span class=&#34;nv&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;o+          &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; B o.+.          &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;. + .o+          &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; . ..o..         &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+----&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;SHA256&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;-----+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@thinkpad-t440s ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;$ ssh-copy-id -i .ssh/id_thinkpadp15.pub root@192.168.1.76
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that I named my key &lt;code&gt;.ssh/id_thinkpadp15&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The last command will ask for the &lt;code&gt;root&lt;/code&gt; password, which is the one we have set in the previous step.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Append your new machine&amp;rsquo;s IP with the corresponding private key in your &lt;strong&gt;old&lt;/strong&gt; machine&amp;rsquo;s &lt;code&gt;.ssh/config&lt;/code&gt; (create the file if it doesn&amp;rsquo;t exist), in my case:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Host 192.168.1.76
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  HostName 192.168.1.76
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  User root
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  IdentityFile ~/.ssh/id_thinkpadp15
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now ssh won&amp;rsquo;t prompt for a password when we connect to our new machine.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;clone-hard-disk-via-ssh&#34;&gt;Clone hard disk via SSH&lt;/h2&gt;
&lt;p&gt;We will use the &lt;code&gt;dd&lt;/code&gt; command from &lt;code&gt;coreutils&lt;/code&gt; and &lt;code&gt;ssh&lt;/code&gt; to remotely clone our hard disk from our &lt;strong&gt;old&lt;/strong&gt; machine to our &lt;strong&gt;new&lt;/strong&gt; machine.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Check &lt;a href=&#34;https://wiki.archlinux.org/title/Dd#Disk_cloning_and_restore&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the official Arch wiki for more info on cloning with &lt;code&gt;dd&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    The following commands completely erase the &lt;strong&gt;new&lt;/strong&gt; machine&amp;rsquo;s hard disk contents! Make sure to save a backup image.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;First, make sure you have enough space in your new hard disk. You can check this by running &lt;code&gt;lsblk&lt;/code&gt; on your old and new machines.&lt;/p&gt;
&lt;p&gt;Also make sure your hard disk in your &lt;strong&gt;new&lt;/strong&gt; machine is unmounted with &lt;code&gt;lsblk&lt;/code&gt; (&lt;code&gt;MOUNTPOINTS&lt;/code&gt; should be empty).&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    In my case the hard disk in my &lt;strong&gt;new&lt;/strong&gt; machine was &lt;code&gt;nvme0n1&lt;/code&gt;. Make sure you choose the correct disk by looking at &lt;code&gt;SIZE&lt;/code&gt; in &lt;code&gt;lsblk&lt;/code&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To avoid corrupting files during cloning, you should run the following command from another live USB in your &lt;strong&gt;old&lt;/strong&gt; machine and make sure your hard drive &lt;code&gt;sda&lt;/code&gt; is unmounted.&lt;/p&gt;
&lt;p&gt;Run the following in your &lt;strong&gt;old&lt;/strong&gt; machine to clone the disk:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;dd &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/dev/sda &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; ssh root@192.168.1.76 dd &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/dev/nvme0n1 &lt;span class=&#34;nv&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;progress
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Change the IP, and &lt;code&gt;sda&lt;/code&gt; and &lt;code&gt;nvme0n1&lt;/code&gt; according to your source and destination disk names.&lt;/p&gt;
&lt;p&gt;It will take 5-10h to clone a 512GB SSD. Once it finishes, you will have copied all the contents from your old machine to your new machine, including &lt;a href=&#34;https://wiki.archlinux.org/title/GRUB&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GRUB&lt;/a&gt; and &lt;a href=&#34;https://wiki.archlinux.org/title/Dm-crypt/Encrypting_an_entire_system&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LUKS&lt;/a&gt; (also with logical volumes) if you had them setup.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visualizing transfer functions in p5.js</title>
      <link>https://sager611.github.io/post/p5js-vis-transfer-function/</link>
      <pubDate>Mon, 27 Feb 2023 16:51:17 +0100</pubDate>
      <guid>https://sager611.github.io/post/p5js-vis-transfer-function/</guid>
      <description>&lt;!--CSS--&gt;
&lt;style&gt;
.resizer { display:flex; margin:0; padding:0; resize:vertical; overflow:hidden }
.resizer &gt; .resized { flex-grow:1; margin:0; padding:0; border:0 }
.ugly { background:red; border:4px dashed black; }
.visualizer { width: 100%; height: 800px; }
&lt;/style&gt;
&lt;p&gt;In 2020 I was following lectures on &lt;a href=&#34;https://didattica.polito.it/pls/portal30/gap.pkg_guide.viewGap?p_cod_ins=06LSLLM&amp;amp;p_a_acc=2020&amp;amp;p_header=S&amp;amp;p_lang=IT&amp;amp;multi=N&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;automatic control&lt;/a&gt; and learned about the &lt;a href=&#34;https://en.wikipedia.org/wiki/Transfer_function&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;transfer function&lt;/a&gt; of a system and ways to visualize it, at which point I was curious so I went ahead and wrote a simple visualizer for generic transfer functions.&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&#34;#visualizer&#34;&gt;jump ahead to the visualizer&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;The basic idea is that we can build a system with a feedback loop that takes an input signal 

$x(t)$ and outputs another signal 

$y(t)$:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34;
           src=&#34;https://sager611.github.io/post/p5js-vis-transfer-function/simple-feedback.svg&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;We then focus on &lt;a href=&#34;https://en.wikipedia.org/wiki/Linear_time-invariant_system&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;linear time-invariant (LTI)&lt;/a&gt; transformations, which in a few words are those which take as input 

$e(t)$ and output 

$y(t) = (e \ast h)(t)$, where 

$h(t)$ is called the &lt;a href=&#34;https://en.wikipedia.org/wiki/Impulse_response&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;impulse response&lt;/a&gt; since it is exactly the value of the output 

$y(t)$ if our input where an impulse 

$e(t)=\delta(t)$.&lt;/p&gt;
&lt;p&gt;In the Laplace function space, the convolution of our transformation becomes a multiplication 

$Y(s) = H(s)E(s)$.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s plug in our 

$H(s)$ in the feedback loop!&lt;/p&gt;
&lt;p&gt;We recursively apply it so we end up with:&lt;/p&gt;


$$
\begin{align*}
Y(s) &amp;= \left( H(s) + H(s)^2 + H(s)^3 + \dots \right) \cdot X(s) \\
     &amp;= \frac{H(s)}{1 - H(s)} \cdot X(s)
\end{align*}
$$
&lt;h2 id=&#34;visualizer&#34;&gt;Visualizer&lt;/h2&gt;
&lt;p&gt;Note that if our 

$H(s)$ touches the value 1 we&amp;rsquo;ll end up with an 

$\infty$, oops.&lt;/p&gt;
&lt;p&gt;So, when designing 

$H(s)$ we want to make sure that it is some distance away from 1.&lt;/p&gt;
&lt;p&gt;But 

$H: \mathbb{C} \rightarrow \mathbb{C}$, how can we visualize it?&lt;/p&gt;
&lt;p&gt;Well, there are multiple approaches and this is where I got curious and decided to write a visualizer in &lt;a href=&#34;https://editor.p5js.org/adriansagerlaganga/full/9CeBgb-Pv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;p5.js&lt;/a&gt;. I included a cartesian plot and a &lt;a href=&#34;https://en.wikipedia.org/wiki/Nichols_plot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nichols plot&lt;/a&gt;. Other common plots include &lt;a href=&#34;https://en.wikipedia.org/wiki/Bode_plot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bode&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Nyquist_plot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nyquist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also included a simple &lt;a href=&#34;https://en.wikipedia.org/wiki/Abstract_syntax_tree&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;abstract syntax tree (AST)&lt;/a&gt; parser and traversal so you can write any 

$H(s)$ you want and see what happens!&lt;/p&gt;
&lt;p&gt;You can try it out right here:&lt;/p&gt;
&lt;iframe class=&#34;visualizer&#34; src=&#34;src/index.html&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;Controls:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-arrows-alt  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Drag to move around.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-arrows-alt-v  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Mouse wheel to zoom in/out.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-keyboard  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Space to reset offset.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;You may encounter some bugs if you introduce incorrect&lt;/p&gt;
&lt;p&gt;$H(s)$ and the visualizer may crash. Use with care.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>UQ-based metrics for chemical sustainability</title>
      <link>https://sager611.github.io/project/epfl-master-thesis/</link>
      <pubDate>Sat, 25 Feb 2023 16:37:09 +0100</pubDate>
      <guid>https://sager611.github.io/project/epfl-master-thesis/</guid>
      <description>&lt;p&gt;
  &lt;i class=&#34;fas fa-leaf  pr-1 fa-fw&#34;&gt;&lt;/i&gt; What if we could systematically quantify &lt;em&gt;how&lt;/em&gt; sustainable a reaction is?&lt;/p&gt;
&lt;p&gt;In this project (my master&amp;rsquo;s thesis at EPFL) I explored how useful it would be if we quantified sustainability as &lt;em&gt;how likely&lt;/em&gt; it is that a reaction is sustainable. This likelihood would then be computed by employing &lt;strong&gt;uncertainty quantification (UQ)&lt;/strong&gt; on some AI model&amp;rsquo;s prediction.&lt;/p&gt;
&lt;p&gt;The main contribution of the project is an &lt;strong&gt;extensible toolkit&lt;/strong&gt; with sustainability metrics based on AI model predictions.&lt;/p&gt;
&lt;p&gt;In this page I collect some of my thoughts derived from this project.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sager611.github.io/uploads/EPFL_Master_Thesis.pdf&#34; target=&#34;_blank&#34;&gt;You can read the full report here.&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    This work was created and funded as part of the &lt;a href=&#34;https://nccr-catalysis.ch/news/recipients-of-2022-young-talents-fellowship/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NCCR Catalysis Young Talents Fellowship&lt;/a&gt;, a National Centre of Competence in Research funded by the Swiss National Science Foundation.
  &lt;/div&gt;
&lt;/div&gt;


&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Table of Contents&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#ai-metric-definition&#34;&gt;AI-metric definition&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#modelling-uncertainty&#34;&gt;Modelling uncertainty&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#quantifying-ai-metrics&#34;&gt;Quantifying AI-metrics&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#validating-ai-metrics&#34;&gt;Validating AI-metrics&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#dont-pay-attention-to-the-_attention_-&#34;&gt;Don&amp;rsquo;t pay attention to the &lt;em&gt;attention&lt;/em&gt; &amp;hellip;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#putting-it-all-together&#34;&gt;Putting it all together&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;

&lt;h2 id=&#34;ai-metric-definition&#34;&gt;AI-metric definition&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s say a chemical reaction can be one of 

$\mathcal{C}$ classes, for ex., according to its type: &amp;ldquo;&lt;em&gt;carboxylic acid to acid chloride&lt;/em&gt;&amp;rdquo;, &amp;ldquo;&lt;em&gt;translocase-catalyzed&lt;/em&gt;&amp;rdquo;, etc.&lt;/p&gt;
&lt;p&gt;Some of these classes are sustainable, 

$\mathcal{C}_\text{sust}$, some are not, 

$\mathcal{C}_\text{non-sust}$, and we may have an unrecognized class, 

$\mathcal{C}_\text{unrec}=\{y_\text{unrec}\}$.&lt;/p&gt;
&lt;details class=&#34;spoiler &#34;  id=&#34;spoiler-8&#34;&gt;
  &lt;summary&gt;Click to view the reaction type distribution&lt;/summary&gt;
  &lt;p&gt;&lt;figure  id=&#34;figure-in-reality-our-distribution-of-reaction-types-is-hierarchical-but-the-argument-still-applies&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;rxn_class_distr.svg&#34; alt=&#34;Reaction classes are divided in multiple levels&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      In reality, our distribution of reaction types is hierarchical, but the argument still applies
    &lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;We can then quantify &lt;em&gt;how likely&lt;/em&gt; we &lt;em&gt;expect&lt;/em&gt; some reaction 

$\pmb{x}$ to be of some class 

$y\in\mathcal{C}$:&lt;/p&gt;


$$ \text{AI-metric}_y := \mathbb{E}_{p(\pmb{\theta}\vert\mathcal{D})}\left[p(y\vert\pmb{x}, \pmb{\theta})\right]\cdot\text{confidence}(\pmb{x}, y) \quad \in [0,1]$$
&lt;p&gt;Where 

$\pmb{\theta}$ are the parameters of our AI model after training it on some dataset 

$\mathcal{D}$.&lt;/p&gt;
&lt;p&gt;Note how we are scaling by how &lt;em&gt;confident&lt;/em&gt; we are that this expected likelihood is correct. In our case,&lt;/p&gt;


$$\text{confidence}(\pmb{x}, y) := 1 - 2\cdot\text{stddev}_{p(\pmb{\theta}\vert\mathcal{D})}\big(p(y\vert\pmb{x}, \pmb{\theta})\big)$$
&lt;p&gt;Which is always in 

$[0,1]$ since probabilities cannot deviate more than 

$1/2$.&lt;/p&gt;
&lt;p&gt;But, how do we score how likely our 

$\pmb{x}$ is of &lt;em&gt;any&lt;/em&gt; class in 

$\mathcal{C}_\text{sust}$?&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-arrow-right  pr-1 fa-fw&#34;&gt;&lt;/i&gt; We simply take the maximum over 

$\mathcal{C}_\text{sust}$:&lt;/p&gt;


$$\text{AI-metric} := \max_{y\in\mathcal{C}_\text{sust}} \text{AI-metric}_y \quad \in [0, 1] $$
&lt;details class=&#34;spoiler &#34; id=&#34;spoiler-21&#34;&gt;
  &lt;summary&gt;Why not sum over

$\mathcal{C}_\text{sust}$?&lt;/summary&gt;
  &lt;p&gt;Formally, we are asking 

$p(\cup_{\mathcal{C}_\text{sust}}y\vert \pmb{x},\mathcal{D})$, which is:


$$ \max_{y\in\mathcal{C}_\text{sust}} p(y\vert\pmb{x},\mathcal{D}) \leq p(\cup_{\mathcal{C}_\text{sust}}y\vert \pmb{x},\mathcal{D}) \leq \sum_{y\in\mathcal{C}_\text{sust}} p(y\vert\pmb{x},\mathcal{D}) $$
    Since we are estimating our metric (see next section) and since some 

$\pmb{x}$ may be of multiple classes, if we sum probabilities we would be overestimating the true value and also our score may end up above 1. &lt;br/&gt;
    It is also crucial that in our case our AI model is &lt;em&gt;single-label&lt;/em&gt;, so it is designed to only predict the highest probability class.
  &lt;/p&gt;
&lt;/details&gt;
&lt;h3 id=&#34;modelling-uncertainty&#34;&gt;Modelling uncertainty&lt;/h3&gt;
&lt;p&gt;Without getting too philosophical, we want to believe that &lt;em&gt;for sure&lt;/em&gt; there is some underlying &lt;em&gt;true&lt;/em&gt; classification set for an input 

$\pmb{x}$, 

$\mathcal{C}_\text{true} \subseteq \mathcal{C}$, so:&lt;/p&gt;


$$
p(y\vert\pmb{x}) = \begin{cases}1 &amp; \text{if }y\in\mathcal{C}_\text{true} \\
0 &amp; \text{o.w.}\end{cases}
$$
&lt;p&gt;Note that (by our philosophy) 

$p(y\vert\pmb{x})$ is equivalent to 

$p(y\vert\pmb{x},\mathcal{D}_\text{all})$ where 

$\mathcal{D}_\text{all}$ is all the knowledge of the universe (quite some information!).&lt;/p&gt;
&lt;p&gt;Of course, in reality at best we know:&lt;/p&gt;


$$p(y\vert\pmb{x},\mathcal{D}) = \mathbb{E}_{p(\pmb{\theta}\vert\mathcal{D})}\left[ p(y\vert\pmb{x},\pmb{\theta}) \right]$$
&lt;p&gt;For our observed training set 

$\mathcal{D}$.&lt;/p&gt;
&lt;p&gt;This means that we are in the presence of two sources of uncertainty&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Epistemic&lt;/strong&gt; 

$\pmb{\theta}$: due to the limited expresiveness of our model and its optimization procedure.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aleatoric&lt;/strong&gt; 

$\mathcal{D}$: due to noise in our training set (some entries aren&amp;rsquo;t reactions or have a wrong label).&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;quantifying-ai-metrics&#34;&gt;Quantifying AI-metrics&lt;/h3&gt;
&lt;p&gt;We use efficient &lt;strong&gt;uncertainty quantification (UQ)&lt;/strong&gt; techniques to estimate our AI-metric according to the two sources of uncertainty&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Monte Carlo Dropout (MCDropout)&lt;/strong&gt; for &lt;strong&gt;epistemic&lt;/strong&gt; uncertainty 

$\pmb{\theta}$: We leave our Drouput layers &lt;em&gt;on&lt;/em&gt; during inference, so for each forward pass on the same 

$\pmb{x}$ we are effectively sampling different submodels from an ensemble.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Test-time data augmentation&lt;/strong&gt; for &lt;strong&gt;aleatoric&lt;/strong&gt; uncertainty 

$\mathcal{D}$: We augment 

$\pmb{x}$ during inference.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We then have 

$N\times M$ likelihoods 

$p(y\vert\pmb{x}^{(i)}, \pmb{\theta}^{(j)})$ where we sampled our input 

$\pmb{x}^{(1)},\dots,\pmb{x}^{(N)}$ and our model 

$\pmb{\theta}^{(1)},\dots,\pmb{\theta}^{(M)}$. Our AI-metric then simply uses the average and stddev of these values to compute its score.&lt;/p&gt;
&lt;p&gt;For example,&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-top-5-reaction-types-for-reaction-according-to-the-ai-metric-the-actual-true-types-for-this-reaction-are-in-red-this-is-a-special-reaction-which-can-be-both-enzymatic-and-non-enzymatic&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Top-5 reaction types for reaction according to the AI-metric. The actual true types for this reaction are in red. This is a special reaction which can be both enzymatic and non-enzymatic&#34;
           src=&#34;https://sager611.github.io/project/epfl-master-thesis/example_likelihood_uq-1.svg&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Top-5 reaction types for reaction according to the AI-metric. The actual true types for this reaction are in red. This is a special reaction which can be both enzymatic and non-enzymatic
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;validating-ai-metrics&#34;&gt;Validating AI-metrics&lt;/h2&gt;
&lt;p&gt;How useful is this metric definition? Is it really able to differentiate reactions 

$\pmb{x}$ in 

$\mathcal{C}_\text{sust}$ from those in 

$\mathcal{C}_\text{non-sust}$?&lt;/p&gt;
&lt;p&gt;To answer this, I looked at two opposite scores:&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-leaf  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;strong&gt;Sustainability score&lt;/strong&gt;: 

$\text{AI-metric} := \max_{y\in\mathcal{C}_\text{sust}} \text{AI-metric}_y $&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-industry  pr-1 fa-fw&#34;&gt;&lt;/i&gt; &lt;strong&gt;Non-sustainability score&lt;/strong&gt;: 

$\overline{\text{AI-metric}} := \max_{y\in\mathcal{C}_\text{non-sust}} \text{AI-metric}_y $&lt;/p&gt;
&lt;p&gt;In particular, I quantify how likely it is that a reaction is &lt;strong&gt;enzymatic&lt;/strong&gt;, since these types of reactions are a classical example of sustainable reactions.&lt;/p&gt;
&lt;p&gt;First, I fine-tuned BERT on a training set of reactions in the &lt;em&gt;SMILES&lt;/em&gt; text-based format, achiving an overall validation accuracy of 93.95% and macro F1 score of 0.901 when predicting the reaction type.&lt;/p&gt;
&lt;p&gt;Then, we can compute 

$\text{AI-metric}$ and 

$\overline{\text{AI-metric}}$ using this BERT model for all reactions in the validation set and plot the results:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;The enzyme metric separates enzymatic from non-sustainable reactions&#34;
           src=&#34;https://sager611.github.io/project/epfl-master-thesis/eval_ec_metric_scores.svg&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Clearly, enzymatic reactions cluster in &lt;span style=&#34;color:#00b5ecff&#34;&gt;blue&lt;/span&gt; separately from non-enzymatic ones in &lt;span style=&#34;color:#ff0000ff&#34;&gt;red&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Around here, our validation discussion of the AI-metric ends, but it would be interesting to study more in depth its applicability, in particular we could carefully design a dataset by artificially introducing aleatoric uncertainty and study how our AI-metric scores change as we increase data noise and as we underfit/overfit our model.&lt;/p&gt;
&lt;h2 id=&#34;dont-pay-attention-to-the-_attention_-&#34;&gt;Don&amp;rsquo;t pay attention to the &lt;em&gt;attention&lt;/em&gt; &amp;hellip;&lt;/h2&gt;
&lt;p&gt;Of what use is a probabilistic metric if we cannot interpret the results? It&amp;rsquo;d be more appropriate if our toolkit of metrics also contained &lt;strong&gt;AI interpretability tools&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This is specially important since we may have &lt;em&gt;high confidence&lt;/em&gt; in a wrong prediction. For example:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34;
           src=&#34;https://sager611.github.io/project/epfl-master-thesis/missclassified_likelihood.svg&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Our BERT model classifies the reaction as class EC.5, which means that is uses an &lt;a href=&#34;https://en.wikipedia.org/wiki/Isomerase&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;isomerase&lt;/a&gt; enzyme. In reality the reaction is not enzymatic, it is of type 9.3.1 (&amp;quot;&lt;em&gt;carboxylic acid to acid chloride&lt;/em&gt;&amp;quot;), and the AI-metric scores it as ~51% likely and confidently to be enzymatic. By our plot from the previous section, we&amp;rsquo;d simply look at this score and blindly accept it as enzymatic.&lt;/p&gt;
&lt;p&gt;So what is going on?&lt;/p&gt;
&lt;p&gt;We may want to look at what BERT is doing. In particular its attention scores:&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-attention-score-matrices-and-sum-of-attention-scores-per-atom-at-the-last-layer&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Attention score matrices and sum of attention scores per atom at the last layer&#34;
           src=&#34;https://sager611.github.io/project/epfl-master-thesis/missclassified_att_last_head.svg&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Attention score matrices and sum of attention scores per atom at the last layer
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Note how attention indicates that the model attributes attention to the &lt;code&gt;OH&lt;/code&gt; and &lt;code&gt;Cl&lt;/code&gt; exchange, which is precisely the rule for type 9.3.1. But the model of course does not predict the reaction as that type! What happens is that token embeddings at the last layer do not represent the corresponding token individually, but rather a global property in the text, so attention does not tell us the casual relationship learned between the input atomic structures and the output.&lt;/p&gt;
&lt;p&gt;In fact, we should &lt;strong&gt;not&lt;/strong&gt; look into &lt;em&gt;attention&lt;/em&gt; attribution, but &lt;em&gt;importance&lt;/em&gt; attribution, i.e. how each input affected the output.&lt;/p&gt;
&lt;p&gt;With the &lt;a href=&#34;https://captum.ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Captum&lt;/a&gt; Python package we can see this importance attribution through the so-called method of &lt;em&gt;Integrated Gradients&lt;/em&gt;&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-blue-positive-attribution-red-negative-attribution&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Blue: positive attribution. Red: negative attribution&#34;
           src=&#34;https://sager611.github.io/project/epfl-master-thesis/missclassified_importance_attr.svg&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      &lt;span style=&#39;color:#00b5ecff&#39;&gt;Blue&lt;/span&gt;: positive attribution. &lt;span style=&#39;color:#ff0000ff&#39;&gt;Red&lt;/span&gt;: negative attribution
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;So now we see that &lt;code&gt;OH&lt;/code&gt; and &lt;code&gt;Cl&lt;/code&gt; exchange did not cause the model to predict the reaction type as EC.5, but some other structure.&lt;/p&gt;
&lt;h2 id=&#34;putting-it-all-together&#34;&gt;Putting it all together&lt;/h2&gt;
&lt;p&gt;To summarize, this toolkit of AI-metrics is useful to automatically select reactions which are likely to be sustainable, but the resulting reactions should always be checked by a chemist expert to make sure that they are indeed sustainable.&lt;/p&gt;
&lt;p&gt;We basically want to introduce a framework with sustainability metrics &lt;strong&gt;during the design cycle of molecule discovery&lt;/strong&gt;, where our expert is still exploring which reactions may be feasible. This could, in principle, accelerate sustainable decision-making in chemistry.&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-scientific-method-applied-to-molecule-discovery-where-we-introduce-our-ai-metrics&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Scientific method applied to molecule discovery, where we introduce our AI-metrics&#34;
           src=&#34;https://sager611.github.io/project/epfl-master-thesis/dmta.svg&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Scientific method applied to molecule discovery, where we introduce our AI-metrics
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;A particular use-case for our toolkit is the &lt;em&gt;multistep retrosynthesis&lt;/em&gt; task, where we want to find a path of reactions that can generate a target molecule from some starting molecules.&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-example-reaction-path-also-called-_route_-or-_pathway_&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Example reaction path, also called _route_ or _pathway_&#34;
           src=&#34;https://sager611.github.io/project/epfl-master-thesis/example_route.svg&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Example reaction path, also called &lt;em&gt;route&lt;/em&gt; or &lt;em&gt;pathway&lt;/em&gt;
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;We simply generate &lt;em&gt;many&lt;/em&gt; possible reaction paths for some target molecule using &lt;a href=&#34;https://github.com/MolecularAI/aizynthfinder&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AiZynthFinder&lt;/a&gt; and Monte-Carlo tree search (MCTS)&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Then, we select the best reaction path according to a weighted sum of our sustainability metrics and an estimation of the monetary cost to carry out the reactions.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /project/epfl-master-thesis/casp-summary_hu36599876e55c22b03b1eeddf42f4d63c_218469_1d2199fd17f64435a10fb586e0f5287e.webp 400w,
               /project/epfl-master-thesis/casp-summary_hu36599876e55c22b03b1eeddf42f4d63c_218469_3b530f4cb0190ba3e970b68047aef17b.webp 760w,
               /project/epfl-master-thesis/casp-summary_hu36599876e55c22b03b1eeddf42f4d63c_218469_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://sager611.github.io/project/epfl-master-thesis/casp-summary_hu36599876e55c22b03b1eeddf42f4d63c_218469_1d2199fd17f64435a10fb586e0f5287e.webp&#34;
               width=&#34;760&#34;
               height=&#34;282&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;In this way, the expert can tune trade-offs between sustainability aspects by simply weighting the metrics.&lt;/p&gt;
&lt;p&gt;We can do a quick ablation study and see how increasing the input weights on our enzyme AI-metric increases the enzyme AI-metric score, but also the route cost, so there is a trade-off between the two which can be tuned with the weights:&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-change-of-sustainability-scores-from-the-baseline-by-changing-the-input-weights&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Change of sustainability scores from the baseline by changing the input weights&#34;
           src=&#34;https://sager611.github.io/project/epfl-master-thesis/ablation_study_short.svg&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Change of sustainability scores from the baseline by changing the input weights
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;This is the end of this little blog, but you can find more details in the &lt;a href=&#34;https://sager611.github.io/uploads/EPFL_Master_Thesis.pdf&#34; target=&#34;_blank&#34;&gt;report.&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Abdar et al. “A review of uncertainty quantification in deep learning: Techniques, applications and challenges”. 2021&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Markert et al. “Chemical representation learning for toxicity prediction”. 2020&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;Sundararajan et al. “Axiomatic Attribution for Deep Networks”. 2017&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;Segler et al. “Planning chemical syntheses with deep neural networks and symbolic ai”. 2018&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>https://sager611.github.io/slides/example/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://sager611.github.io/slides/example/</guid>
      <description>&lt;h1 id=&#34;create-slides-in-markdown-with-wowchemy&#34;&gt;Create slides in Markdown with Wowchemy&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://wowchemy.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wowchemy&lt;/a&gt; | &lt;a href=&#34;https://wowchemy.com/docs/content/slides/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://revealjs.com/pdf-export/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PDF Export&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;
&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Code block:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;porridge&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;blueberry&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;porridge&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;blueberry&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Eating...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;
&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;
&lt;p&gt;Block math:&lt;/p&gt;
&lt;p&gt;$$
f\left( x \right) = ;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;
&lt;p&gt;Make content appear incrementally&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{% fragment %}} One {{% /fragment %}}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{% fragment %}} **Two** {{% /fragment %}}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{% fragment %}} Three {{% /fragment %}}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;
&lt;span class=&#34;fragment &#34; &gt;
  One
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
  &lt;strong&gt;Two&lt;/strong&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
  Three
&lt;/span&gt;
&lt;hr&gt;
&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;
&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{% speaker_note %}}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; Only the speaker can read these notes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; Press &lt;span class=&#34;sb&#34;&gt;`S`&lt;/span&gt; key to view
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  {{% /speaker_note %}}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;
&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;

&lt;/aside&gt;
&lt;hr&gt;
&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/media/boards.jpg&#34;
  &gt;

&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;
&lt;p&gt;Customize the slide style and background&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;slide&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/media/boards.jpg&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;}}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;slide&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;background-color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;#0000FF&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;}}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;slide&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;my-style&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;}}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;reveal&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;section&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;reveal&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;section&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;reveal&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;section&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;h3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;navy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://discord.gg/z8wNYzb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://wowchemy.com/docs/content/slides/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
