<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>P5js | Adri√°n Sager La Ganga</title>
    <link>https://sager611.github.io/tags/p5js/</link>
      <atom:link href="https://sager611.github.io/tags/p5js/index.xml" rel="self" type="application/rss+xml" />
    <description>P5js</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Mon, 27 Feb 2023 16:51:17 +0100</lastBuildDate>
    <image>
      <url>https://sager611.github.io/media/icon_hu10442524216547739280.png</url>
      <title>P5js</title>
      <link>https://sager611.github.io/tags/p5js/</link>
    </image>
    
    <item>
      <title>Visualizing transfer functions in p5.js</title>
      <link>https://sager611.github.io/post/p5js-vis-transfer-function/</link>
      <pubDate>Mon, 27 Feb 2023 16:51:17 +0100</pubDate>
      <guid>https://sager611.github.io/post/p5js-vis-transfer-function/</guid>
      <description>&lt;!--CSS--&gt;
&lt;style&gt;
.resizer { display:flex; margin:0; padding:0; resize:vertical; overflow:hidden }
.resizer &gt; .resized { flex-grow:1; margin:0; padding:0; border:0 }
.ugly { background:red; border:4px dashed black; }
.visualizer { width: 100%; height: 800px; }
&lt;/style&gt;
&lt;p&gt;In 2020 I was following lectures on &lt;a href=&#34;https://didattica.polito.it/pls/portal30/gap.pkg_guide.viewGap?p_cod_ins=06LSLLM&amp;amp;p_a_acc=2020&amp;amp;p_header=S&amp;amp;p_lang=IT&amp;amp;multi=N&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;automatic control&lt;/a&gt; and learned about the &lt;a href=&#34;https://en.wikipedia.org/wiki/Transfer_function&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;transfer function&lt;/a&gt; of a system and ways to visualize it, at which point I was curious so I went ahead and wrote a simple visualizer for generic transfer functions.&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&#34;#visualizer&#34;&gt;jump ahead to the visualizer&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;The basic idea is that we can build a system with a feedback loop that takes an input signal $x(t)$
 and outputs another signal $y(t)$
:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;flex justify-center	&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34;
           src=&#34;https://sager611.github.io/post/p5js-vis-transfer-function/simple-feedback.svg&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;We then focus on &lt;a href=&#34;https://en.wikipedia.org/wiki/Linear_time-invariant_system&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;linear time-invariant (LTI)&lt;/a&gt; transformations, which in a few words are those which take as input $e(t)$
 and output $y(t) = (e \ast h)(t)$
, where $h(t)$
 is called the &lt;a href=&#34;https://en.wikipedia.org/wiki/Impulse_response&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;impulse response&lt;/a&gt; since it is exactly the value of the output $y(t)$
 if our input where an impulse $e(t)=\delta(t)$
.&lt;/p&gt;
&lt;p&gt;In the Laplace function space, the convolution of our transformation becomes a multiplication $Y(s) = H(s)E(s)$
.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s plug in our $H(s)$
 in the feedback loop!&lt;/p&gt;
&lt;p&gt;We recursively apply it so we end up with:&lt;/p&gt;
$$
\begin{align*}
Y(s) &amp;= \left( H(s) + H(s)^2 + H(s)^3 + \dots \right) \cdot X(s) \\
     &amp;= \frac{H(s)}{1 - H(s)} \cdot X(s)
\end{align*}
$$

&lt;h2 id=&#34;visualizer&#34;&gt;Visualizer&lt;/h2&gt;
&lt;p&gt;Note that if our $H(s)$
 touches the value 1 we&amp;rsquo;ll end up with an $\infty$
, oops.&lt;/p&gt;
&lt;p&gt;So, when designing $H(s)$
 we want to make sure that it is some distance away from 1.&lt;/p&gt;
&lt;p&gt;But $H: \mathbb{C} \rightarrow \mathbb{C}$
, how can we visualize it?&lt;/p&gt;
&lt;p&gt;Well, there are multiple approaches and this is where I got curious and decided to write a visualizer in &lt;a href=&#34;https://editor.p5js.org/adriansagerlaganga/full/9CeBgb-Pv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;p5.js&lt;/a&gt;. I included a cartesian plot and a &lt;a href=&#34;https://en.wikipedia.org/wiki/Nichols_plot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nichols plot&lt;/a&gt;. Other common plots include &lt;a href=&#34;https://en.wikipedia.org/wiki/Bode_plot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bode&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Nyquist_plot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nyquist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also included a simple &lt;a href=&#34;https://en.wikipedia.org/wiki/Abstract_syntax_tree&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;abstract syntax tree (AST)&lt;/a&gt; parser and traversal so you can write any $H(s)$
 you want and see what happens!&lt;/p&gt;
&lt;p&gt;You can try it out right here:&lt;/p&gt;
&lt;iframe class=&#34;visualizer&#34; src=&#34;./src/index.html&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;Controls:&lt;/p&gt;
&lt;p&gt;
  &lt;span class=&#34;inline-block  pr-1&#34;&gt;
    &lt;svg style=&#34;height: 1em; transform: translateY(0.1em);&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 24 24&#34;&gt;&lt;path fill=&#34;none&#34; stroke=&#34;currentColor&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; stroke-width=&#34;1.5&#34; d=&#34;M3.75 3.75v4.5m0-4.5h4.5m-4.5 0L9 9M3.75 20.25v-4.5m0 4.5h4.5m-4.5 0L9 15M20.25 3.75h-4.5m4.5 0v4.5m0-4.5L15 9m5.25 11.25h-4.5m4.5 0v-4.5m0 4.5L15 15&#34;/&gt;&lt;/svg&gt;
  &lt;/span&gt; Drag to move around.&lt;/p&gt;
&lt;p&gt;
  &lt;span class=&#34;inline-block  pr-1&#34;&gt;
    &lt;svg style=&#34;height: 1em; transform: translateY(0.1em);&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 24 24&#34;&gt;&lt;path fill=&#34;none&#34; stroke=&#34;currentColor&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; stroke-width=&#34;1.5&#34; d=&#34;M3 7.5L7.5 3m0 0L12 7.5M7.5 3v13.5m13.5 0L16.5 21m0 0L12 16.5m4.5 4.5V7.5&#34;/&gt;&lt;/svg&gt;
  &lt;/span&gt; Mouse wheel to zoom in/out.&lt;/p&gt;
&lt;p&gt;
  &lt;span class=&#34;inline-block  pr-1&#34;&gt;
    &lt;svg style=&#34;height: 1em; transform: translateY(0.1em);&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 24 24&#34;&gt;&lt;path fill=&#34;none&#34; stroke=&#34;currentColor&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; stroke-width=&#34;1.5&#34; d=&#34;M4.5 10.5L12 3m0 0l7.5 7.5M12 3v18&#34;/&gt;&lt;/svg&gt;
  &lt;/span&gt; Space to reset offset.&lt;/p&gt;
&lt;div class=&#34;flex px-4 py-3 mb-6 rounded-md bg-yellow-100 dark:bg-yellow-900&#34;&gt;
&lt;span class=&#34;pr-3 pt-1 text-red-400&#34;&gt;
  &lt;svg height=&#34;24&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 24 24&#34;&gt;&lt;path fill=&#34;none&#34; stroke=&#34;currentColor&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; stroke-width=&#34;1.5&#34; d=&#34;M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0zM12 15.75h.007v.008H12z&#34;/&gt;&lt;/svg&gt;
&lt;/span&gt;
  &lt;span class=&#34;dark:text-neutral-300&#34;&gt;You may encounter some bugs if you introduce incorrect $H(s)$
and the visualizer may crash. Use with care.&lt;/span&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
